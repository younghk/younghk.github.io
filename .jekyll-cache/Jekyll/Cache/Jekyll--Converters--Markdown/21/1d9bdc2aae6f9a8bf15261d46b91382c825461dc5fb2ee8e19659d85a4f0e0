I"q+<p>최종 수정일 : 2020-07-03</p>

<p>AWS(Amazon Web Services) 는 2006년 EC2와 S3를 시작으로 제공된 클라우드 서비스이다.<br />
현재 대표적인 클라우스 서비스로 자리매김 되어있으며 아주 다양한 솔루션들을 제공하고 있다.</p>

<p>어떤 서비스들을 제공하는지 대표적인 서비스들을 중심으로 간략히 정리해보자.</p>

<hr />

<h2 id="application-integration">Application Integration</h2>

<h3 id="aws-sqs">AWS SQS</h3>

<blockquote>
  <p>Amazon Simple Queue Service</p>
</blockquote>

<ul>
  <li>매니지드 서비스로 제공되는 메시지 큐 서비스(Azure : Queue Storage / Google Cloud : Pub/Sub)</li>
  <li>SQS 에서는 최소 1번 전달을 보장하는 표준 대기열과 메시지가 전달된 순서대로 정확히 한 번 처리하는 것을 보장하는 FIFO 대기열을 지원</li>
</ul>

<h2 id="container">Container</h2>

<h3 id="aws-ecs">AWS ECS</h3>

<blockquote>
  <p>Amazon Elastic Container Service</p>
</blockquote>

<ul>
  <li>AWS 의 매니지드 컨테이너 오케스트레이션 서비스(Azure : Container Instances / Google Cloud : Google Kubernetes Engine)</li>
  <li>ECS 에 클러스터를 생성하고 EC2 인스턴스를 등록할 수도 있음</li>
  <li>Service 와 Task 로 Docker Container 를 운영, 클러스터에 등록되어 있는 EC2 인스턴스들 위에 Docker Container 를 스케쥴링</li>
</ul>

<h3 id="aws-eks">AWS EKS</h3>

<blockquote>
  <p>Amazon Elastic Kubernetes Service</p>
</blockquote>

<ul>
  <li>아마존 웹 서비스의 매니지드 쿠버네티스 서비스(Azure : Kubernetes Service / Google Cloud : Google Kubernetes Engine)</li>
  <li>ECS 라는 아마존의 독자 서비스가 있지만 구글의 노하우가 담긴 Kubernetes 를 이용한 또 다른 오케스트레이션 서비스를 제공함</li>
</ul>

<h3 id="aws-fargate">AWS Fargate</h3>

<blockquote>
  <p>Amazon Fargate</p>
</blockquote>

<ul>
  <li>서버 또는 클러스터를 관리할 필요 없이 컨테이너를 실행 가능(Azure: Container Instances / Google Cloud : Cloud Run)</li>
  <li>ECS 와 EKS 기반으로 제공</li>
  <li>Docker Container 를 EC2 인스턴스 없이 독립적으로 실행할 수 있게 함</li>
  <li>AWS Lambda 와 EC2 기반 ECS Container 중간 쯤 위치한 서비스로 볼 수 있음</li>
</ul>

<h2 id="compute">Compute</h2>

<h3 id="amazon-ec2">Amazon EC2</h3>

<blockquote>
  <p>Amazon Elastic Compute Cloud</p>
</blockquote>

<ul>
  <li>리눅스나 윈도우 환경의 컴퓨팅 자원을 가상 서버로 제공.(Microsoft Azure : Virtual Machine, Google Cloud : Google Compute Engine)</li>
  <li>리눅스 서버의 경우 SSH 로 직접 접속해서 관리하는 것이 가능하기 때문에 기존의 서버 운영 환경과 가장 닮아있는 서비스라고 할 수 있음.</li>
  <li>너무 다양한 Instance type 을 제공하는 바람에 뭐가 뭔지 알기 어려웠는데 2019년 10월 인스턴스 타입을 검색하고 비교할 수 있는 검색 메뉴가 추가되어서 조금 더 적절한 인스턴스 타입을 선택하는데 편리해짐.</li>
  <li>대표적인 Instance Type
    <ul>
      <li>M5 : 컴퓨팅, 메모리, 네트워크 리소스들이 균형있게 제공되는 범용 인스턴스</li>
      <li>T3 : CPU 가속을 지원하는 범용 인스턴스</li>
      <li>C5 : 컴퓨팅 특화</li>
      <li>R5 : 메모리 최적화</li>
      <li>I3, D2, H1 : 스토리지 최적화</li>
      <li>P3 : GPU 지원</li>
      <li>Inf1 : 추론 최적화(Inferentia 칩 사용)</li>
    </ul>
  </li>
  <li>부하에 따라 인스턴스 수를 조정하는 Auto Scaling 그룹이나 Elastic Load Balancer(ELB)와 밀접한 관련이 있음</li>
</ul>

<h3 id="aws-lightsail">AWS LightSail</h3>

<blockquote>
  <p>Amazon LightSail</p>
</blockquote>

<ul>
  <li>쉽고 가벼운 가상 서버 서비스(Azure : App Service / Google Cloud : Compute Engine)</li>
  <li>서버 사양만 선택해서 바로 서버를 사용할 수 있는 서비스로, EC2 의 복잡한 인스턴스 선택 및 설정 과정을 넘어갈 수 있음</li>
</ul>

<h3 id="aws-eb">AWS EB</h3>

<blockquote>
  <p>Amazon Elastic Beanstalk</p>
</blockquote>

<ul>
  <li>웹 애플리케이션 및 서비스를 쉽게 배포하고 scaling 할 수 있는 서비스(Azure : App Engine / Google Cloud : App Engine)</li>
  <li>코드를 업로드하여 EB 가 용량 provisioning, load balacing, auto-scaling 등을 알아서 수행하여 배포함</li>
</ul>

<h3 id="aws-lambda">AWS Lambda</h3>

<blockquote>
  <p>Amazon Lambda</p>
</blockquote>

<ul>
  <li>Serverless 컴퓨팅 서비스(Azure : Functions / Google Cloud : Cloud Functions)</li>
  <li>사용자가 직접 서버를 운영할 필요 없이 코드만 배포해도 사용이 가능</li>
  <li>다양한 언어 지원(C#, Java, Go, Python, Ruby, PowerShell, Node.js)하고 그 외 언어들도 커스텀하여 직접 구현 가능</li>
  <li>API Gateway, ELB 등을 연동해 웹 요청에 대한 처리가 가능</li>
  <li>S3, DynamoDB, Kinesis 등을 연동해 컴퓨팅 작업 수행 가능</li>
</ul>

<h2 id="database">Database</h2>

<h3 id="amazon-aurora">Amazon Aurora</h3>

<ul>
  <li>아마존의 MySQL 및 PostgreSQL 호환 관계형 데이터베이스(Azure : Database for MySql, Database for PostgreSQL / Google Cloud : Cloud SQL, Cloud Spanner)</li>
</ul>

<h3 id="amazon-rds">Amazon RDS</h3>

<blockquote>
  <p>Amazon Relational Database Service</p>
</blockquote>

<ul>
  <li>클라우드에서 RDB(Relational Database)를 쓸 수 있게 서비스(Azure : SQL Database / Google Cloud : Cloud SQL)</li>
  <li>하드웨어 프로비저닝, 설정, 패치 및 백업과 같은 작업을 자동화하고 탄력적인 서비스 제공</li>
</ul>

<h3 id="amazon-dynamodb">Amazon DynamoDB</h3>

<ul>
  <li>Key-Value / Document Database(Azure : Cosmos DB / Google Cloud : Firestore, Cloud Bigtable)</li>
  <li>다중 리전 / 다중 마스터 데이터베이스로서 내구성이 뛰어나며, 다양한 기능(보안, 백업, 복원, 인 메모리 캐싱 등)을 제공</li>
</ul>

<h3 id="aws-elasticache">AWS ElastiCache</h3>

<blockquote>
  <p>Amazon ElastiCache</p>
</blockquote>

<ul>
  <li>Redis 와 Memcached를 매니지드 서비스로 제공(Azure : Cache for Redis / Google Cloud : MemoryStore)</li>
  <li>처리량이 많고 빠른 응답이 필요한 캐시, 세션 스토어 등으로 많이 사용</li>
  <li>클러스터 구성, 백업, 스케일 업/다운 등의 작업을 쉽게 할 수 있음</li>
</ul>

<h2 id="networking--content-delivering">Networking &amp; Content Delivering</h2>

<h3 id="amazon-vpc">Amazon VPC</h3>

<blockquote>
  <p>Amazon Virtual Private Cloud</p>
</blockquote>

<ul>
  <li>계정별로 격리된 네트워크 환경을 구성할 수 있게 도와주는 서비스(Microsoft Azure : Virtual Network, Google Cloud: Google Virtual Private Cloud)</li>
  <li>VPC 를 이용해 VPC, Subnet, Route Table, ACL, Security Group 등을 사용해 논리적인 네트워크 분할 작업을 손쉽게 할 수 있고 계정 안에서나 계정 간에 격리된 네트워크를 연결할 수 있는 다양한 옵션을 제공하고 있음</li>
  <li>많은 서비스들이 VPC 와 연관되어 있기 때문에 알아두어야 AWS 를 잘 사용할 수 있음</li>
</ul>

<h3 id="aws-elb">AWS ELB</h3>

<blockquote>
  <p>Amazon Elastic Load Balancer</p>
</blockquote>

<ul>
  <li>들어오는 애플리케이션 트래픽을 target 에 자동으로 분산함(Google Cloud : Cloud Load Balancing)</li>
  <li>Application Load Balancer(Azure : Application Gateway)
    <ul>
      <li>HTTP/HTTPS 트래픽에 대해 적합</li>
      <li>microservice 와 container 등 최신 애플리케이션 아키텍처 전달을 위한 고급 요청 라우팅 기능을 제공</li>
      <li><strong><em>OSI Layer 7 에서 작동(L7 Load Balancing)</em></strong></li>
      <li>최신 SSL/TLS 프로토콜 사용</li>
    </ul>
  </li>
  <li>Network Load Balancer(Azure : Load Balancer)
    <ul>
      <li>IP protocol data 기반으로 VPC 내의 target(EC2, microservice, container, …)으로 연결을 routing</li>
      <li><strong><em>OSI Layer 4 에서 작동(L4 Load Balancing)</em></strong></li>
      <li>매우 짧은 지연 시간을 유지하면서 초당 수백만 개의 요청 처리 가능</li>
    </ul>
  </li>
  <li>Classic Load Balancer
    <ul>
      <li>EC2 인스턴스에서 기본적인 load balancing 을 제공</li>
      <li>EC2 Classic 네트워크 내에 구축됨</li>
      <li>VPC 를 사용할 때는 Application Load Balancer(L7) 나 Network Load Balancer(L4) 를 사용하는 것이 좋음</li>
    </ul>
  </li>
</ul>

<h3 id="aws-route-53">AWS Route 53</h3>

<blockquote>
  <p>Amazon Route 53</p>
</blockquote>

<ul>
  <li>가용성과 확장성이 뛰어난 Cloud Domain Name System(Azure : DNS / Google Cloud : Google Domain, Cloud DNS)</li>
  <li>IP address 를 DNS 로 변경</li>
  <li>IPv6 와 호환</li>
</ul>

<h2 id="security-identity-compilance">Security, Identity, Compilance</h2>

<h3 id="aws-iam">AWS IAM</h3>

<blockquote>
  <p>Amazon Identity and Access Management</p>
</blockquote>

<ul>
  <li>권한 관리를 지원(Microsoft Azure : Azure Active Directory, Role Based Access Control / Google Cloud : Google Identity and Access Management)</li>
  <li>AWS 계정을 생성하면 root 계정이 생성되고 root 는 해당 계정에 대한 모든 권한을 가지기 때문에 IAM 사용자를 생성하여 권한을 제한시키고 그 권한의 범위 내에서만 작업이 이루어질 수 있도록 해야 함</li>
  <li>Role 이나 Policy 를 통해 AWS 내부에서 서비스에 권한을 위임하는 것도 가능</li>
</ul>

<h2 id="storage">Storage</h2>

<h3 id="aws-s3">AWS S3</h3>

<blockquote>
  <p>Amazon Simple Storage Service</p>
</blockquote>

<ul>
  <li>AWS 에서 제공하는 오브젝트 스토리지 서비스(Microsoft Azure : Blob Storage, Google Cloud : Google Cloud Storage)</li>
  <li>파일 시스템이 아닌 오브젝트 스토리지 서비스로 모든 파일에 API 로 접근 가능</li>
  <li>무제한적인 확장성과 높은 가용성 및 내구성을 보장</li>
  <li>버킷 단위의 사용, 단일 파일 최대 5TB</li>
  <li>높은 내구성은 필연적으로 많은 cost 가 들기 때문에 S3 standard 부터 Glacier 등 다양한 서비스를 제공</li>
</ul>

<h3 id="aws-ebs">AWS EBS</h3>

<blockquote>
  <p>Amazon Elastic Block Store</p>
</blockquote>

<ul>
  <li>대규모 고성능 블록 스토리지(Azure : Manages disks / Google Cloud : Persistent Disk)</li>
  <li>EBS 볼륨은 쉽게 생각해서 하드디스크 저장소(SSD, HDD) 등을 생각하면 됨</li>
</ul>

<hr />

<p>참고 자료 :</p>

<p><a href="https://aws.amazon.com/ko/?nc2=h_lg">AWS 공식 사이트</a><br />
<a href="https://azure.microsoft.com/en-us/solutions/">Azure 공식 사이트</a><br />
<a href="https://cloud.google.com/solutions">Google Cloud 공식 사이트</a><br />
<a href="https://www.44bits.io/ko/keyword/amazon-web-service">44bits</a></p>
:ET