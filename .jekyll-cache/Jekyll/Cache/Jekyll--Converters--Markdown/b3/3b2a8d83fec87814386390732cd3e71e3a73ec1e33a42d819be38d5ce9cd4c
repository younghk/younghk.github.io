I"]L<p>정보보호에서 Digital Signature 란 무엇인지 간략히 학습해보자.</p>

<h2 id="digital-signatures">Digital Signatures</h2>

<p>앞서 우리는 Message Authentication 에 대해서 살펴봤다.</p>

<p>이를 통해 두 파티 간의 메세지 교환을 third party(공격자)로부터 보호할 수 있긴 하지만 서로 보호할 수는 없는 방식(신뢰할 수 있는 통신의 문제)이다.</p>

<p>이런 문제점을 해결하기 위해 <em>Digital Signature</em> 를 도입하게 되었다.<br />
이를 통해 우리는 다음이 가능해진다.</p>

<ul>
  <li>author, date, time 을 verify 할 수 있다.</li>
  <li>message contents 를 authenticate 할 수 있다.</li>
  <li>분쟁을 해결하기 위해 third party 가 확인 가능하다.</li>
</ul>

<p>그러나 이는 unique verification 으로는 불가능하며, authentication function 에 또 다른 것들을 추가하므로써 가능케한다.</p>

<p><img src="/assets/images/2019-12-09---digital-signature/image1.png" alt="digital signature model" /></p>

<p><em>Digital Signature</em> 의 모델은 위와 같다.</p>

<p><img src="/assets/images/2019-12-09---digital-signature/image2.png" alt="digital signature elements" /></p>

<p>이 때 필요한 elements 들이 위에 나타나있다.</p>

<ul>
  <li>Cryptographic hash function
    <ul>
      <li>이는 collision resistant 해야 한다. 그렇지 않으면 공격당하기 쉬워진다.(hash 함수의 특성)</li>
    </ul>
  </li>
  <li>이를 통해 만든 해쉬값 $h$ 를 암호화해서 Signature $S$ 를 만든다.</li>
  <li>수신자(Alice)는 검증의 과정을 거쳐서 해당 signature 가 valid 한지 판별한다.</li>
</ul>

<h3 id="attacks-and-forgeries">Attacks and Forgeries</h3>

<p>이러한 <em>Digital Signature</em> 를 공격하거나 위조하는데 어떤 것들이 있는지 살펴보자.</p>

<ul>
  <li>Key-only Attack
    <ul>
      <li>A 의 public key 만 알 경우(A 의 signature 가 공격당하는 상황)</li>
    </ul>
  </li>
  <li>Known message attack
    <ul>
      <li>message 와 signature 집합에 접근이 가능한 경우</li>
    </ul>
  </li>
  <li>Generic chosen message attack
    <ul>
      <li>공격 전 A 의 public key 와 독립적으로 메세지 리스트를 고를 수 있다.</li>
      <li>그리고 A 로부터 고른 메세지의 valid signature 를 얻는다.</li>
    </ul>
  </li>
  <li>Directed chosen message attack
    <ul>
      <li>A 의 public key 를 알고 메세지 리스트를 고른다.</li>
      <li>그리고 메세지의 valid signature 를 얻는다.</li>
    </ul>
  </li>
  <li>
    <p>Adaptive chosen message attack</p>

    <ul>
      <li>A 를 <em>orcale</em> 로써 사용한다.</li>
      <li>A 는 이전에 얻은 message-signature pair 에 의존적인 메세지의 signature 를 요청하게 된다.</li>
      <li>이는 public key 를 몇 개 얻은 후, 그 다음 것을 고르는 방식이다.</li>
    </ul>
  </li>
  <li>Break success levels
    <ol>
      <li>Total break
        <ul>
          <li>A 의 private key 를 결정짓는다.</li>
          <li>매우 어려운 단계이다.</li>
        </ul>
      </li>
      <li>Universal forgery
        <ul>
          <li>해당 algorithm 에 대한 공격이다.</li>
          <li>해당 algorithm 과 동등한 signature 를 만들어내는 효율적인 signing algorithm 을 찾는다.</li>
        </ul>
      </li>
      <li>Selective forgery
        <ul>
          <li>선택한 하나의 메세지에 대해서만 하나의 페어를 찾아낸다.</li>
          <li>weak collision hash</li>
        </ul>
      </li>
      <li>Existential forgery
        <ul>
          <li>적어도 하나의 signature 를 위조하는 것</li>
          <li>전체적인 메세지에 대한 컨트롤은 없다.</li>
          <li>strong collision hash</li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<h3 id="digital-signatures-requirements">Digital Signatures Requirements</h3>

<p>이처럼 다양한 공격의 가능성이 있으므로 <em>Digital Signature</em> 는 다음과 같은 requirements 가 있다.</p>

<ul>
  <li>must depend on the message signed</li>
  <li>unique information 을 sender 에게 사용해야 한다.
    <ul>
      <li>이는 양쪽이 위조되고 거부되는 것을 막기 위함이다.</li>
      <li>unique 하지 않을 경우 더이상 보안이 보장되지 않는다.</li>
    </ul>
  </li>
  <li>상대적으로 생산하기(produce) 쉬워야 한다.</li>
  <li>상대적으로 인식하고 검증하기 쉬워야 한다.</li>
  <li>위조하는데는 computationally infeasible 해야 한다.
    <ul>
      <li>새로운 메세지에 대해 기존의 digital signature 가 이를 만족해야 함.</li>
      <li>또한 주어진 메세지의 의심스러운 digital signature 에 대해서도 가능해야 함.</li>
    </ul>
  </li>
  <li>storage 에 현실적으로 저장 가능해야 함.
    <ul>
      <li>digital signature 가 비정상적으로 클 경우 storage 에 overhead 가 될 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="direct-digital-signatures">Direct Digital Signatures</h3>

<p><em>Direct Digital Signature</em> 는 이름 그대로 direct 하기에 오직 sender 와 receiver 만 관여한다.</p>

<p>그 내용을 간략히 설명하면 다음과 같다.</p>

<ul>
  <li>receiver 가 sender 의 public key 를 가지고 있다고 가정한다.</li>
  <li>sender 에 의해 만들어진 digital signature 로 전체 메세지를 sigining 하거나 private key 를 이용해 hash 한다.</li>
  <li>confidentiality 를 위해 receiver 의 public key 를 이용해 암호화 할 수 있다.</li>
  <li>sign 을 먼저 하고 암호화를 진행하고 signature 로 분쟁(dispute)를 다룬다.</li>
  <li>sender 의 private key 에 security 를 의존한다.</li>
</ul>

<h2 id="elgamal-digital-signatures">ElGamal Digital Signatures</h2>

<p>이제 <em>ElGamal Digital Signatures</em> 를 알아보자.</p>

<p>이는 signature 의 변형 중 ElGamal 을 이용한 것으로,</p>

<ul>
  <li>Galois field 에서 exponentiation 을 사용</li>
  <li>보안성이 Diffie-Hellman 의 discrete logarithms 계산 복잡성에 의존함</li>
</ul>

<p>이러한 두 가지 특성을 가진다.</p>

<p>private key 를 이용해 encryption 해서 signing 과정을 진행하고, public key 를 이용해 decrytion 해 verification 과정을 진행한다.</p>

<p>이 때, 각 유저들은 그들의 키를 생성한다.</p>

<ul>
  <li>비밀 키를 고른다. $1 \lt x_A \lt q-1$</li>
  <li>public key 를 계산한다.
    <ul>
      <li>{a, q, and $y_A = a^{x_A} \mod q$}</li>
      <li>여기서 a 는 q 의 primitive root 이다.<br />
<small>이는 앞서 본 ElGamal cryptography 와 유사하다.</small></li>
    </ul>
  </li>
</ul>

<p>signed message M 은 다음과 같이 만들어진다.</p>

<ol>
  <li>$m = H(M),\ 0 \leq m \leq (q-1)$ 가 되도록 M 을 hash 한다.</li>
  <li>$1 \leq K \leq (q-1)$ 인 random integer $K$ 를 고른다. 이 때, $\gcd(K, q-1) = 1$ 이다.</li>
  <li>temporary key $S_1 = a^K \mod q$ 를 계산한다.</li>
  <li>$K^{-1} \mod(q-1)$ 을 계산한다.</li>
  <li>$S_2 = K^{-1}(m - x_AS_1) \mod(q-1)$ 을 계산한다.</li>
  <li>$(S_1,\ S_2)$ 가 signature 가 된다.</li>
</ol>

<p>이렇게 만들어진 signed message M 은 user B(any) 가 다음의 과정을 거쳐서 verify 할 수 있다.</p>

<ul>
  <li>$V_1 = a^m \mod{q}$</li>
  <li>$V_2 = y_A^{S_1}S_1^{S_2}\mod{q}$</li>
  <li>$V_1 = V_2$ 일 경우 valid 한 signature 이다.</li>
</ul>

<p>이를 증명해보면 다음과 같다.</p>

\[\begin{aligned}
V_2 &amp;= y_A^{S_1}S_1^{S_2} \mod{q} \\
    &amp;= a^{x_AS_1}a^{KS_2} \mod{q} \\
    &amp;= a^{x_AS_1}a^{K\left(K^{-1}\left(m-x_AS_1\right)\right)} \mod{q} \\
    &amp;= a^{x_AS_1}a^{\left(m - x_AS_1 \right)} \mod{q} \\
    &amp;= a^m \mod{q} \\
    &amp;= V_1
\end{aligned}\]

<p>이제 간단한 예제로 ElGamal Signature 를 살펴보자.</p>

<blockquote>
  <ul>
    <li>GF(19) 에서 q=19, a=10 일 때, 원시근(primitive root)은 {2, 3, 10, 13, 14, 15}</li>
    <li>A 가 key 를 계산
      <ul>
        <li>$x_A = 16$ 이라고 했을 떄, $y_A = 10^{16} \mod{19} = 4$</li>
      </ul>
    </li>
    <li>A 가 message 를 hash $m = 14$ 로 sign
      <ul>
        <li>random K = 5 라고 하면 gcd(18, 5) = 1</li>
        <li>$S_1 = 10^5 \mod{19} = 3$</li>
        <li>$K^{-1} \mod{(q-1)} = 5^{-1} \mod{18} = 11$</li>
        <li>$S_2 = 11\left( 14 - 16 \cdot 3 \right) \mod{18} = 4$</li>
        <li>signature = (3, 4)</li>
      </ul>
    </li>
    <li>B 가 verify 할 때는
      <ul>
        <li>$V_1 = 10^{14} \mod{19} = 16$</li>
        <li>$V_2 = 4^3 \cdot 3^4 \mod{19} = 5184 \mod{19} \equiv 16 \mod{19}$</li>
        <li>16 = 16 이므로 signature 가 valid 하다.</li>
      </ul>
    </li>
  </ul>
</blockquote>

<h2 id="schnorr-digital-signatures">Schnorr Digital Signatures</h2>

<p>이제 <em>Schnorr Digital Signature</em> 에 대해 알아보자.</p>

<p>이 방식 역시 <em>ElGamal Digital Signature</em> 처럼 Galois field 에서 exponentiation 을 활용하는 방식이다.<br />
이는 security 가 DH 의 discrete logarithm 에 의존한다는 의미다.</p>

<p>이 방식의 특징은 message dependent computation 을 최소화한다는 것이다.</p>

<ul>
  <li>주요 작업은 메세지에 의존적이지 않고 idle time 안에 완료될 수 있다.</li>
  <li>Message dependent part 는 2n-bit 정수를 b-bit 정수와 곱해야한다.</li>
</ul>

<p>이 때, prime modulus p 를 이용하게 되는데, p-1 은 q 라는 적절한 size 의 prime factor(소인수) 를 가진다.</p>

<ul>
  <li>보통 p 는 1024-bit, q 는 160-bit 정도가 된다.</li>
</ul>

<p>이러한 p, q 를 잘 설정해야 한다.</p>

<h3 id="schnorr-key-setup">Schnorr Key Setup</h3>

<p>$a^q = 1 \mod{p}$ 를 만족하는 $a$ 를 고르게 되는데, (a, p, q) 가 global public parameters 가 된다.</p>

<p>각 유저들은 키를 생성하게 된다.</p>

<ul>
  <li>비밀 키 $s$ 는 $0 \lt s \lt q$ 를 만족한다.</li>
  <li>public key 는 $v = a^{-s} \mod{p}$ 로 계산한다.</li>
</ul>

<p>이제 <em>Schnorr Signature</em> 의 과정을 보자.</p>

<p>유저는 message M 을 다음과 같이 signing 한다.</p>

<ol>
  <li>random $r$ ($0 \lt r \lt q$) 을 고르고 $x = a^r \mod{p}$ 를 계산</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>message M 을 x 와 합치고 hash 한다. $e = H\left( M\</td>
          <td> </td>
          <td>\ x \right)$</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>$y = \left( r + se \right) \mod{q}$</li>
  <li>signature = (e, y)</li>
</ol>

<p>다른 유저가 verify 하는 과정은 다음을 따른다.</p>

<ol>
  <li>$x’ = a^yv^e \mod{p}$</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>$e = H\left( M\</td>
          <td> </td>
          <td>\ x’ \right)$ 를 계산한다.</td>
        </tr>
      </tbody>
    </table>
  </li>
</ol>

<p>위의 과정을 증명해보자.</p>

\[\begin{aligned}
x'  &amp;= a^yv^e \mod{p} \\
    &amp;= a^ya^{-se} \mod{p} \\
    &amp;= a^{y-se} \mod{p} \\
    &amp;= a^r \mod{p} \\
    &amp;= x \mod{p}
    \\
\text{hence, }&amp;\ H(M\ ||\ x') = H(M\ ||\ x)
\end{aligned}\]

<h2 id="digital-signature-standarddss">Digital Signature Standard(DSS)</h2>

<p><em>Digital Signature Standard</em> 는 NIST &amp; NSA 에서 90년대 초반 고안했다.</p>

<p>이는 SHA hash algorithm 을 이용하며 <em>DSA</em> 를 표현한다.<small><em>DSS</em> 는 표준이고 <em>DSA</em> 는 알고리즘이다.</small></p>

<p>1991년 FIPS-186에서 publish 되었으며 93, 96, 00년에 개정되었다.</p>

<p>2000년 FIPS 186-2 에서 RSA 와 Elliptic curve cryptography 기반의 DSA 가 포함되었다.</p>

<p><em>RSA</em> 와는 달리 <em>DSA</em> 는 암호화나 키 교환에 사용될 수는 없다.</p>

<p>여기서 <em>ECC</em> 는 resource limited 한 곳에 사용된다.(특성상 효율적)</p>

<p>그리고 <em>DSA</em> 는 not reversible 하다.</p>

<h3 id="dss-vs-rsa-signatures">DSS vs RSA Signatures</h3>

<p><img src="/assets/images/2019-12-09---digital-signature/image3.png" alt="dss rsa signatures" /></p>

<p><em>RSA</em> 방식과 <em>DSS</em> 방식의 구조적 차이점을 다음과 같이 확인할 수 있다.</p>

<h3 id="digital-signature-algorithmdsa">Digital Signature Algorithm(DSA)</h3>

<p><em>DSA</em> 는 320-bit signature 를 512~1024-bit security 로부터 생성한다.<br />
이는 <em>RSA</em> 보다 작으면서도 빠른 것이다.</p>

<ul>
  <li>320 vs. 1024 bits, modulo 160-bit</li>
</ul>

<p>그러나 이는 digital signature scheme 만 할 뿐 암호화나 키 교환을 위해서 사용되지는 않는다.
이 역시 앞서 나왔던 것들처럼 discrete logarithm 의 계산 복잡성에 보안성을 의존한다.</p>

<p>구조를 잘 살펴보면 ElGamal 과 Schnorr scheme 의 변형임을 확인할 수 있다.</p>

<h3 id="dsa-key-generation">DSA Key Generation</h3>

<p><em>DSA</em> 는 global public key value (p, q, g) 를 가진다.</p>

<ul>
  <li>prime $q$ 는 160-bit 이다.</li>
  <li>large prime $p,\ 2^{L-1} \lt p \lt 2^L$ 를 고른다.
    <ul>
      <li>L = 512~1024 bits 를 가진다. 이 때 64의 배수형태를 띄도록 한다.</li>
      <li>$q$ 는 ($p-1$) 의 prime factor(divisor) 이다.</li>
    </ul>
  </li>
  <li>$g = h^{\left( p-1 \right) \over q}$ 인 $g$ 를 고른다.
    <ul>
      <li>$1 \lt h \lt p-1$ 이고 $h^{\left( p-1 \right) \over q} \mod{p} \gt 1$ 이어야 한다.</li>
    </ul>
  </li>
</ul>

<p>이제 private key 를 고르고 public key 를 계산한다.</p>

<ul>
  <li>choose random private key $x \lt q$</li>
  <li>compute public key $y = g^x \mod{p}$</li>
</ul>

<h3 id="dsa-signature-creation">DSA Signature Creation</h3>

<p>message M 을 어떻게 signing 하는지 알아보자.</p>

<ol>
  <li>
    <p>random signature key $k,\ k \lt q$ 를 생성한다.</p>

    <ul>
      <li>이 때 $k$ 는 반드시 random 이어야하며 사용하고나면 재사용하지 않고 destroy 해야 한다. 재사용할 경우 보안성이 깨질 수 있다.</li>
    </ul>
  </li>
  <li>
    <p>signature pair 를 계산한다.</p>

    <ul>
      <li>$r = (g^k \mod{p}) \mod{q}$</li>
      <li>$s = \left[k^{-1}\left(H\left(M\right) + xr\right)\right] \mod{q}$</li>
    </ul>
  </li>
</ol>

<p>이렇게 구한 signature pair(r, s) 를 메세지 M 과 같이 보낸다.</p>

<h3 id="dsa-signature-verification">DSA Signature Verification</h3>

<p><em>DSA Signature</em> 를 verify 하는 과정을 살펴보자.</p>

\[\begin{aligned}
x   &amp;= s^{-1} \mod {q} \\
u_1 &amp;= [H(M)w] \mod{q} \\
u_2 &amp;= (rw) \mod{q} \\
v   &amp;= [(g^{u_1}y^{u_2}) \mod{p}] \mod{q}
\end{aligned}\]

<p>이 때 $v = r$ 이면 valid 하다.</p>

<p>위의 과정을 증명해보자.</p>

\[\begin{aligned}
    s           &amp;= [k^{-1}(H(M) + xr)] \mod{q} \\
\text{thus, } k &amp;\equiv H(M)s^{-1} + xrs^{-1} \\
                &amp;\equiv H(M)w + xrw \mod{q} \\
\end{aligned}\]

<p>Since $g$ has order $q \mod{p}$, we have</p>

\[\begin{aligned}
g^k &amp;\equiv g^{H(M)w}g^{xrw} \\
    &amp;\equiv g^{H(M)w}y^{rw} \\
    &amp;\equiv g^{u_1}y^{u_2} \mod{p}
\end{aligned}\]

<h3 id="dss-overview">DSS Overview</h3>

<p>위의 과정을 도식으로 보면 다음과 같다.</p>

<p><img src="/assets/images/2019-12-09---digital-signature/image4.png" alt="dss overview" /></p>

<p>이 때 메세지에 의존적이지 않은 $r$ 에 대한 마지막 테스트를 하게 된다.<small>Compare 연산인듯 하다</small></p>

<p>계산이 많이 필요한 부분은 exponential calculation 인 $g^k \mod{p}$ 와 $k^{-1}$ 이다.</p>

<ul>
  <li>sign 될 메세지에 의존적이지 않기 때문에 $r$ 과 $k^{-1}$ 을 미리 계산할 수 있다.</li>
</ul>

<h2 id="public-key-certificate">Public Key Certificate</h2>

<p>누군가의 public key 를 다른 이에게 전달하기 위해서는 어떻게 해야할까?</p>

<ul>
  <li>broadcast 를 한다.</li>
  <li>편리하지만 누구나 이 announcement(broadcast) 를 위조하기 쉽다.</li>
</ul>

<p>이러한 물음에 답하기 위해 public key certificate 를 고안하게 되었다.</p>

<ul>
  <li>public key + ID of the key owner 로 구성된다.</li>
  <li>전체 block 이 신뢰하는 third party, certificate authority(CA) 로부터 sign 된다. (RSA, DSA 사용)</li>
</ul>

<p>이와 관련하여 X.509 가 universally 하게 accept 된 public-key certificate 이다.(IPsec, TLS, SSH, S/MIME, …)</p>

<p><img src="/assets/images/2019-12-09---digital-signature/image5.png" alt="public key certificate" /></p>

<p>여기서 <em>CA</em> 는 모든 시스템으로부터 완전히 신뢰된 것이다.<br />
이런 신뢰의 문제는 사실 계속 꼬리를 물 수 밖에 없기 때문에 이렇게 공인된 존재가 필요하게 된다.</p>

<h2 id="group-signature">Group Signature</h2>

<p><em>Group Signature</em> 는 Eurocrypt 에서 91년도에 D.Chaum 이 발표한 것으로 그룹에 속한 멤버가 익명으로 signing 을 진행하게 된다.</p>

<p>이렇게 만들어진 signature 는 어떤 그룹이 서명한 것인지는 알 수 있으나 어떤 유저가 서명했는지는 알기 어렵게 되는 이점이 있다.<br />
즉, anonymity 가 지켜진다.</p>

<p>그러나 group manager 가 있고 이 group manager 는 누가 signing 을 했는지 알 수 있다.</p>

<p><em>Group Signature</em> 의 특징은 다음과 같다.</p>

<ul>
  <li>Unforgeability
    <ul>
      <li>그룹의 멤버만이 메세지를 정확하게 sign 할 수 있다.</li>
    </ul>
  </li>
  <li>Anonymity/Traceability
    <ul>
      <li>그룹 멤버 중 누가 서명했는지 알 수 없지만 그룹 매니저는 이를 추적할 수 있다.</li>
    </ul>
  </li>
  <li>Unlinkability
    <ul>
      <li>같은 그룹내의 멤버가 두 signature 를 발행(issue)했는지 결정할 수 없다.</li>
    </ul>
  </li>
  <li>Security against framing attack
    <ul>
      <li>어떤 그룹 멤버가 다른 멤버를 위해 대신 signing 할 수는 없다.</li>
    </ul>
  </li>
</ul>

<h2 id="ring-signature">Ring Signature</h2>

<p><em>Ring Signature</em> 는 <em>Group Signature</em> 의 변형 중 하나이다.</p>

<ul>
  <li>개별 signature 의 anonymity 를 revoke 할 방법이 없다.</li>
  <li>어떤 그룹의 유저든간에 추가 설정 없이 그룹으로 사용될 수 있다.</li>
</ul>

<h3 id="application-to-cryptocurrency">Application to Cryptocurrency</h3>

<p>이러한 <em>Ring Signature</em> 를 활용해 암호화폐를 구현한 것이 <strong>Monero</strong> 이다.</p>

<p><strong>Monero</strong> 의 특징은 다음과 같다.</p>

<ul>
  <li>transaction 간의 linkage 를 숨긴다.(unlinkability, untraceablility)</li>
  <li>Ring signature 가 유저의 account key 를 사용하고 public key 들이 blockchain 으로부터 pull 된다.</li>
  <li>가능한 signer 들이 ‘ring’ 안에서는 모두 동등하고 valid 하다고 본다.</li>
  <li>외부자(outsider)가 유저의 account 안에 어떤 signer 가 있는지 말할 수 없다.</li>
  <li>이로 인해 transaction 이 untraceable 하게 된다.</li>
</ul>

<p><small>최종 수정일 : 2019-12-10</small></p>

<blockquote>
  <p>본 포스트는 학부-_정보보호_ 를 공부하며 정리한 글 입니다.<br />
잘못된 내용이 있다면 알려주세요!<br />
감사합니다 :)</p>
</blockquote>
:ET